jmp _start;

#define DEFAULT_PORT_VAL 0

#define KERNEL_STACK_SIZE 2048
#define TASK_STACK_SIZE 1000

// ROM starts after 64k internal RAM
#define ROM_ADDRESS 65536
// external bus starts after 64k internal ram + 128k rom
#define EXTBUS_ADDRESS 196608

#include <programs/r2os/lib/syscalldef.txt>
#include <programs/mem.txt>

//Include drivers for console screen and device host
#include <drivers\drv_udh.txt>
#include <drivers\drv_cscr.txt>
#include <programs/r2os/console.txt>
#include <programs/r2os/multitask.txt>

float _kernel_interrupt_no = 0;
float* _kernel_params;

void print_state_stack(float* stack_top) {
    float* s = stack_top;
    print("State Stack @"); printn(s);
    print("\nSS     "); printn(*(s-6));
    print("\nESP    "); printn(*(s-10));
    print("\nEBP    "); printn(*(s-11));
    print("\nIP     "); printn(*(s-18));
    print("\nCS     "); printn(*(s-19));
    print("\n");
}

void print_task_state(float task_idx) {
    print("Task: "); printn(task_idx); print("\n");
    float task_ss = _kernel_task_ss[task_idx];
    float task_esp = _kernel_task_esp[task_idx];
    print("ESP+SS: "); printn(task_ss + task_esp); print("\n");
    print("    SS: "); printn(task_ss); print("\n");
    print("   ESP: "); printn(task_esp); print("\n");
}

void memcpy(float* dest, float* source, float count) {
    while(count > 0) {
        *dest = *source;
        ++dest;
        ++source;
        --count;
    }   
}

void kernel_init() {
    mem_heap_init(10000, 16*1024);
    udhSetBusAddress(EXTBUS_ADDRESS);
    init_console();    
    
    float init_idx = task_create(ROM_ADDRESS, 0);
    
    task_goto_next();
    print("Starting init "); printn(_kernel_task_cur); print("\n\n");
    //jmp _halt;
}

void kernel_service() {
    _kernel_params = _kernel_task_ss[_kernel_task_cur] + _kernel_task_esp[_kernel_task_cur] + 21;
    float task_ptr_offset = _kernel_task_segment[_kernel_task_cur];
    
    out 0, _kernel_task_cur;
    out 1, _kernel_params[0];
    out 2, _kernel_params[1];
    out 3, _kernel_params[2];
    out 4, _kernel_task_ss[_kernel_task_cur];
    out 5, _kernel_task_esp[_kernel_task_cur];
    out 7, _kernel_interrupt_no;

    float* kp = _kernel_params;
    float sysfn = kp[0];
    
    if(sysfn == SYSCALL_YIELD) {
        task_goto_next();
        
    } else if(sysfn == SYSCALL_PRINT) {
        float* strp = kp[1];
        strp += task_ptr_offset;
        cscrPrintLine(strp, 999);
    
    } else if(sysfn == SYSCALL_PRINTNUM) {
        float num = kp[1];
        if(num < 0) {
            num = -num;
            cscrPutChar('-');   
        }
        cscrPrintNumber(kp[1], 999);
        
    } else if(sysfn == SYSCALL_MEMALLOC) {
        float* memp = mem_heap_alloc(kp[1]);
        memp -= task_ptr_offset;
        kp[0] = memp;
        
    } else if(sysfn == SYSCALL_FORK) {
        float parent_task = _kernel_task_cur;
        float new_task = task_create(_kernel_task_segment[parent_task], 0);
        if(new_task < 0) {
            kp[0] = -2; // failed
        } else {
            kp[0] = -1; // set the return value for the child
            // Copy the stack of the current process to the child
            memcpy(_kernel_task_ss[new_task], _kernel_task_ss[parent_task], TASK_STACK_SIZE);
            _kernel_task_esp[new_task] = _kernel_task_esp[parent_task];
            
            // Set the return value for the parent (the child's task id)
            kp[0] = new_task;
            
            // Update the child's SS restore value in the stack
            float* child_stack_base = _kernel_task_ss[new_task] + _kernel_task_esp[new_task] + 20;
            *(child_stack_base - 6) = _kernel_task_ss[new_task];
            
            //print_state_stack(child_stack_base);
            
            // Note that we don't make a copy of the data segment, so all global variables/memory is shared!
        }
        
    } else {
        // halt
        print_task_state(_kernel_task_cur);
        print("\n\nKP TRACE\n");
        printmem(kp, 4);
        print("!HALT!");
        int 1;
    }
    
    out 6, kp[0];
}



// Hypervisor Entrypoint
#include <programs/hyp1.txt>
