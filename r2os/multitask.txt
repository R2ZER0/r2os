#define MAX_NUM_TASKS 16

float _kernel_task_cur = -1;
float _kernel_task_prev = -1;
float _kernel_task_active[MAX_NUM_TASKS];
float _kernel_task_ss[MAX_NUM_TASKS];
float _kernel_task_esp[MAX_NUM_TASKS];
float _kernel_task_segment[MAX_NUM_TASKS];

void task_init(float idx, float* stack_bottom, float* segment, float* entrypoint) {
    _kernel_task_active[idx] = 1;
    _kernel_task_ss[idx] = stack_bottom;
    _kernel_task_esp[idx] = TASK_STACK_SIZE - 21;
    _kernel_task_segment[idx] = segment;
    
    float* s = stack_bottom + TASK_STACK_SIZE - 1; // s is the top of the stack
    *s = 0; // LS
    *(s-1) = 0; // KS
    *(s-2) = 0; // ES
    *(s-3) = 0; // GS
    *(s-4) = 0; // FS
    *(s-5) = segment; // DS
    *(s-6) = stack_bottom; // SS
    *(s-7) = segment; // CS (External)
    *(s-8) = 0; // EDI
    *(s-9) = 0; // ESI
    *(s-10) = TASK_STACK_SIZE - 1; // ESP
    *(s-11) = 0; // EBP
    *(s-12) = 0; // EDX
    *(s-13) = 0; // ECX
    *(s-14) = 0; // EBX
    *(s-15) = 0; // EAX
    *(s-16) = 0; // CMPR
    *(s-17) = entrypoint; // IP (External)
    *(s-18) = entrypoint; // IP (Internal)
    *(s-19) = segment; // CS (Internal)
}

float task_next() {
    float i = _kernel_task_cur;
    
    while(1) {
        ++i;
        if(i >= MAX_NUM_TASKS) {
            i = 0;
        }
        if(_kernel_task_active[i]) {
            return i;    
        }
        if(i == _kernel_task_cur) {
            return -1; // there are no active tasks   
        }
    }
}

float task_goto_next() {
    float i = task_next();
    if(i >= 0) {
        _kernel_task_prev = _kernel_task_cur;
        _kernel_task_cur = i;
    }
    return i;
}

float _next_free_task() {
    float i = 0;
    for(i = 0; i < MAX_NUM_TASKS; ++i) {
        if(!_kernel_task_active[i]) {
            return i;
        }
    }
    return -1;
}

float task_create(float* segment, float* entrypoint) {
    float* stack_bottom = mem_heap_alloc(TASK_STACK_SIZE);
    float task_idx = _next_free_task();
    if(task_idx >= 0) {
        task_init(task_idx, stack_bottom, segment, entrypoint);
    }
    return task_idx;
}

float* task_get_stack_top(float idx) {
    return task_get_stack[idx] + TASK_STACK_SIZE - 1;
}

float* task_get_stack(float idx) {
    return _kernel_task_ss[idx];
}
